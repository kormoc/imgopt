#!/usr/bin/env bash

# Simple bash script to use find to recursively locate JPEG/PNG files
# and process them with jpegtran, jfifremove, optipng, advpng and pngout 
# using settings to minimize file size and strip all metadata headers.
#
# To change optimization programs/settings, edit/comment out in functions
# do_jpeg and do_png below.
#
# Author: Joel Hardi
# Version: 0.1.2 2009-04-02
#
# For more information and usage examples, see:
# http://lyncd.com/2009/03/imgopt-lossless-optimize-png-jpeg/

# Global stat vars
STAT_FILE_COUNT=0
STAT_FILE_SIZE_START=0
STAT_FILE_SIZE_END=0

# The variable which holds the path to the temporary file on which the actual
# processing is done.
TMPF=""

# Do we have a tty?
interactive=0
tty -s &> /dev/null && interactive=1

# Verbose output if interactive
verbose() {
    if [[ $interactive -eq 1 ]]; then
        echo "$1";
    fi
}

# Usage help text
usage () {
  cat - <<EOF
Usage: imgopt [FILE/DIR] [FILE/DIR] [FILE/DIR] ...

Optimizes any combination of files and directories. Directories are searched
recursively, and all image files in any subdirectories are optimized.

Examples:

 imgopt .      Optimize all images in current directory and any subdirectories
 imgopt *.png  Optimize all pngs in current directory only

EOF
}

check_bin() {
  # $1 is the binary
  # $2 is the text to print if missing
  which "$1" &> /dev/null
  if [[ $? -ne 0 ]]; then
    echo -e "$2"
    exit 1
  fi
  return 0
}

do_stats () {
  local stat_file_size_diff=$((STAT_FILE_SIZE_START-STAT_FILE_SIZE_END))
  local stat_file_size_diff_percent=$((stat_file_size_diff*100/STAT_FILE_SIZE_START))
  echo "I processed $STAT_FILE_COUNT files saving $stat_file_size_diff bytes ( $stat_file_size_diff_percent % )"
}

# Optimize PNG file in place
# (edit here to add/remove PNG optimizing steps or change parameters)
# More information on PNG optimization techniques:
# http://optipng.sourceforge.net/pngtech/optipng.html
do_png () {
  # $1 is filename

  # advpng, part of AdvanceCOMP, is available here:
  # http://advancemame.sourceforge.net/comp-download.html
  verbose "Optimizing with advpng..."
  advpng -z -4 -q "$1"

  # OptiPNG is available here:
  # http://optipng.sourceforge.net/
  verbose "Optimizing with optipng..."
  optipng -q -zc9 -zm8-9 -zs0-3 -f0-5 -zw 32k "$1"

  # pngout is available here (binaries only):
  # http://www.jonof.id.au/index.php?p=kenutils
  verbose "Optimizing with pngout..."
  pngout "$1" "$TMPF" -q -y
  # Sometimes (not always) pngout appends ".PNG" to output filename
  if [[ -f ${TMPF}.PNG ]]; then
    mv -f "${TMPF}.PNG" "$TMPF"
  fi

  return 0
}

# Optimize JPEG file in place
# (edit here to add/remove JPEG optimizing steps or change parameters)
do_jpeg () {
  # $1 is filename
  local tmp_jpeg=$(mktemp -t tmp.XXXXXX) || return 1

  # jpegtran is part of libjpeg (almost surely already on your system).
  # If not, it's here:
  # http://www.ijg.org/
  verbose "Optimizing with jpegtran..."
  jpegtran -copy none -optimize -outfile "$tmp_jpeg" "$1" && mv -f "$tmp_jpeg" "$1"

  # jfifremove is included with this script, be sure to compile and install
  verbose "Optimizing with jfifremove..."
  jfifremove < "$1" > "$tmp_jpeg" && mv -f "$tmp_jpeg" "$1"
  
  # remove the temp file
  rm -f "$tmp_jpeg"

  return 0
}

# Optimize file, only replace original if optimized version is smaller
do_file () {
  STAT_FILE_COUNT=$((STAT_FILE_COUNT+1))
  # $1 is name of file
  if [[ -w $1 ]]; then

    # Copy file to tmp file and optimize in place
    cp -f "$1" "$TMPF"
    # Get basic information in order to preserve it once optimized
    IFS=' ' read -u 3 access username groupname 3< <(stat -c '%a %U %G' "$1")

    # Try mime identifying
    local mime=$(file -b --mime-type "$1" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
      case "$mime" in
        image/png )
        do_png "$TMPF"
        ;;
        image/jpeg )
        do_jpeg "$TMPF"
        ;;
        * )
        echo "$1 could not be identified, please verify the type!"
        return 1
        ;;
      esac
    else
      # Fall back to file extension
      case "$1" in
        *.[Pp][Nn][Gg] )
        do_png "$TMPF"
        ;;
        *.[Jj][Pp][Ee][Gg] )
        do_jpeg "$TMPF"
        ;;
        *.[Jj][Pp][Gg] )
        do_jpeg "$TMPF"
        ;;
        * )
        echo "$1 could not be identified, please rename to .jpg or .png"
        return 1
        ;;
      esac
    fi
    
    # If optimized file is smaller, copy it over original
    local size_before=$(stat -c '%s' "$1")
    STAT_FILE_SIZE_START=$((STAT_FILE_SIZE_START+size_before))
    local size_after=$(stat -c '%s' "$TMPF")
    STAT_FILE_SIZE_END=$((STAT_FILE_SIZE_END+size_after))
    local bytes_reduced=$((size_before-size_after))
    if [[ $size_after -lt $size_before ]]; then
      cp -f "$TMPF" "$1"
      # Preserve original basic information
      chmod $access "$1"
      chown $username:$groupname "$1"
      echo "$1 reduced $bytes_reduced bytes to $size_after bytes"
    else
      echo "$1 unchanged at $size_before bytes"
    fi

    return 0
  else
    echo "$1 is not writable, skipping"
    return 1
  fi
}

# Optimize recursively all files in a directory
do_dir () {
  # $1 is name of dir
  local ret_val=0
  while IFS= read -r -u 3 -d $'\0' file; do
    do_file "$file"
    ret_val=$?
  done 3< <(find "$1" -type f \( -iregex '.*\.[jp][pn]g$' -o -iregex '.*\.jpeg$' \) -print0)
  return $ret_val
}

# Sanity check binaries
check_bin advpng     "advpng, part of AdvanceCOMP, is available here:\nhttp://advancemame.sourceforge.net/comp-download.html"
check_bin optipng    "OptiPNG is available here:\nhttp://optipng.sourceforge.net/"
check_bin pngout     "pngout is available here (binaries only):\nhttp://www.jonof.id.au/index.php?p=kenutils"
check_bin jpegtran   "jpegtran is part of libjpeg (almost surely already on your system).\nIf not, it's here:\n http://www.ijg.org/"
check_bin jfifremove "jfifremove is included with this script, be sure to compile and install"

# If run with args, optimize these files or recursively all files in a dir
if [[ $1 && $1 != '-h' && $1 != '--help' ]]; then
  TMPF=$(mktemp tmp.XXXXXX) || exit 1
  RETURNVAL=1
  until [[ -z $1 ]]; do
    if [[ -d $1 ]]; then
      do_dir "$1"
      RETURNVAL=$?
    elif [[ -f $1 ]]; then
      do_file "$1"
      RETURNVAL=$?
    else
      echo "$1 is neither a file nor a directory, skipping"
    fi
    shift
  done
  rm -f "$TMPF"
  do_stats
  exit $RETURNVAL
# If run without args, print usage help
else
  usage
  exit 1
fi
